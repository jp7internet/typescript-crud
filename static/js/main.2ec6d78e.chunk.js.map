{"version":3,"sources":["contexts/Page.tsx","components/Header.tsx","hooks/useFetch.ts","components/Status.tsx","components/RecordError.tsx","pages/Record/List.tsx","pages/Record/Form.tsx","hooks/useForm.ts","pages/Record/New.tsx","pages/Record/Edit.tsx","pages/Record/Mutations.tsx","hooks/useMutation.ts","pages/Record/index.tsx","pages/Article/ListItem.tsx","pages/Article/FormFields.tsx","pages/Article/index.tsx","pages/Author/ListItem.tsx","pages/Author/FormFields.tsx","pages/Author/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Page","Context","createContext","page","Articles","setPage","console","warn","usePage","useContext","PageStore","children","useState","Provider","value","Header","pageButton","pageName","className","onClick","Authors","href","target","rel","useFetch","path","options","records","setRecords","Date","version","setVersion","loading","setLoading","error","setError","url","process","useEffect","a","axios","get","params","res","data","callFetchFunction","Status","text","RecordError","validationErrors","response","validation","message","config","map","errorKey","constraints","Object","values","constraint","constraintKey","RecordList","ListItem","emptyRecord","activeRecord","setActiveRecord","record","id","RecordForm","FormFields","submitAction","success","initialState","handleAction","formState","setFormState","handleChange","event","tagName","name","parsedValue","handleSubmit","preventDefault","useForm","onSubmit","type","RecordNew","create","RecordEdit","update","remove","RecordMutations","callback","processing","setProcesing","setSuccess","wrap","fn","undefined","then","catch","finally","post","put","delete","useMutation","apiPath","RecordIndex","apiOptions","ArticleListItem","title","author","ArticleFormFields","authorsFetch","onChange","rows","ArticleIndex","relations","AuthorListItem","AuthorFormFields","AuthorIndex","App","renderSwitch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ec6d78e.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nexport enum Page {\n  Articles = 'Articles',\n  Authors = 'Authors',\n}\n\ntype ContextType = {\n  page: Page;\n  setPage: (page: Page) => void;\n};\n\nconst Context = createContext<ContextType>({\n  page: Page.Articles,\n  setPage: (page) => console.warn('no page provider'),\n});\n\nexport const usePage = () => useContext(Context);\n\nexport const PageStore: React.FC = ({ children }) => {\n  const [page, setPage] = useState(Page.Articles);\n  return (\n    <Context.Provider value={{ page, setPage }}>{children}</Context.Provider>\n  );\n};\n","import { usePage, Page } from '../contexts/Page';\n\nexport const Header: React.FC = () => {\n  const { page, setPage } = usePage();\n\n  const pageButton = (pageName: Page) => {\n    return (\n      <button\n        className={pageName === page ? 'active' : ''}\n        onClick={() => setPage(pageName)}\n      >\n        {pageName}\n      </button>\n    );\n  };\n\n  return (\n    <header>\n      <h1>\n        <div className=\"title\">TypeScript CRUD</div>\n        <div className=\"subtitle\">With React and TypeORM</div>\n      </h1>\n      <div className=\"navigation\">\n        <div className=\"internal\">\n          {pageButton(Page.Articles)}\n          {pageButton(Page.Authors)}\n        </div>\n        <div className=\"external\">\n          <a\n            href=\"https://github.com/jp7internet/typescript-crud\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"button\"\n          >\n            GitHub\n          </a>\n        </div>\n      </div>\n    </header>\n  );\n};\n","import axios, { AxiosError } from 'axios';\nimport { useState, useEffect } from 'react';\nimport { Record } from '../interfaces/RecordEntities';\n\nexport const useFetch = <T extends Record>(path: string, options?: {}) => {\n  const [records, setRecords] = useState<T[]>([]);\n  const [version, setVersion] = useState(+new Date());\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<AxiosError>();\n\n  const url = `${process.env.REACT_APP_API}/${path}`;\n\n  useEffect(() => {\n    const callFetchFunction = async () => {\n      setLoading(true);\n      try {\n        const res = await axios.get<T[]>(url, { params: options });\n        setRecords(res.data);\n      } catch (e) {\n        setError(e as AxiosError);\n      }\n      setLoading(false);\n    };\n    callFetchFunction();\n  }, [url, options, version]);\n\n  return { records, setVersion, loading, error };\n};\n","interface IProps {\n  text: string;\n}\n\nexport const Status: React.FC<IProps> = ({ text }) => {\n  return (\n    <div className=\"status\">\n      <span className=\"status-text\">{text}</span>\n    </div>\n  );\n};\n","import { AxiosError } from 'axios';\nimport { ValidationError } from 'class-validator';\n\ninterface IProps {\n  error: AxiosError;\n}\n\nexport const RecordError: React.FC<IProps> = ({ error }) => {\n  const validationErrors = error?.response?.data\n    ?.validation as ValidationError[];\n\n  return (\n    <div className=\"error\">\n      <div>\n        <b>Message:</b> {error.message}\n      </div>\n      <div>\n        <b>URL:</b> {error.config.url}\n      </div>\n      {error.response?.data.message && (\n        <div>\n          <b>Details:</b> {error.response?.data.message}\n        </div>\n      )}\n      {validationErrors &&\n        validationErrors.map((error, errorKey) => (\n          <ul key={errorKey}>\n            {error.constraints &&\n              Object.values(\n                error.constraints\n              ).map((constraint, constraintKey) => (\n                <li key={constraintKey}>{constraint}</li>\n              ))}\n          </ul>\n        ))}\n    </div>\n  );\n};\n","import { Record } from '../../interfaces/RecordEntities';\nimport { RecordListProps } from '../../interfaces/PagesProps';\nimport { usePage } from '../../contexts/Page';\nimport { Status } from '../../components/Status';\nimport { RecordError } from '../../components/RecordError';\n\nexport const RecordList = <T extends Record>({\n  ListItem,\n  records,\n  emptyRecord,\n  activeRecord,\n  setActiveRecord,\n  loading,\n  error,\n}: RecordListProps<T>) => {\n  const { page } = usePage();\n\n  return (\n    <div className=\"list\">\n      {error && <RecordError error={error} />}\n      <div>\n        <h2>{page}</h2>\n        <button className=\"bt-new\" onClick={() => setActiveRecord(emptyRecord)}>\n          New\n        </button>\n        <ul>\n          {records.map((record) => (\n            <li\n              key={record.id}\n              className={record.id === activeRecord?.id ? 'active' : ''}\n              onClick={() => setActiveRecord(record)}\n            >\n              <ListItem record={record} />\n            </li>\n          ))}\n        </ul>\n      </div>\n      {loading && <Status text=\"Loading...\" />}\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { Record } from '../../interfaces/RecordEntities';\nimport { RecordFormProps } from '../../interfaces/PagesProps';\nimport { useForm } from '../../hooks/useForm';\n\nexport const RecordForm = <T extends Record>({\n  FormFields,\n  activeRecord,\n  submitAction,\n  success,\n}: RecordFormProps<T>) => {\n  const { formState, setFormState, handleChange, handleSubmit } = useForm<T>(\n    activeRecord,\n    submitAction\n  );\n\n  useEffect(() => {\n    if (activeRecord.id || success) {\n      setFormState(activeRecord);\n    }\n  }, [setFormState, activeRecord, success]);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <FormFields formState={formState} handleChange={handleChange} />\n        <input type=\"submit\" />\n      </form>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Action } from './useMutation';\n\nexport type IChangeElement =\n  | HTMLInputElement\n  | HTMLSelectElement\n  | HTMLTextAreaElement;\n\nexport const useForm = <T>(initialState: T, handleAction: Action<T>) => {\n  const [formState, setFormState] = useState<T>(initialState);\n\n  const handleChange = (event: React.ChangeEvent<IChangeElement>): void => {\n    const { tagName, name, value } = event.target;\n    const parsedValue = tagName === 'SELECT' && value === '' ? null : value;\n    setFormState({ ...formState, [name]: parsedValue });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    handleAction(formState);\n  };\n\n  return { formState, setFormState, handleChange, handleSubmit };\n};\n","import { Record } from '../../interfaces/RecordEntities';\nimport { RecordNewProps } from '../../interfaces/PagesProps';\nimport { RecordForm } from './Form';\n\nexport const RecordNew = <T extends Record>({\n  FormFields,\n  activeRecord,\n  create,\n  success,\n}: RecordNewProps<T>) => {\n  return (\n    <div className=\"new\">\n      <h2>New</h2>\n      <RecordForm\n        FormFields={FormFields}\n        activeRecord={activeRecord}\n        submitAction={create}\n        success={success}\n      />\n    </div>\n  );\n};\n","import { Record } from '../../interfaces/RecordEntities';\nimport { RecordEditProps } from '../../interfaces/PagesProps';\nimport { RecordForm } from './Form';\n\nexport const RecordEdit = <T extends Record>({\n  FormFields,\n  activeRecord,\n  update,\n  remove,\n  success,\n}: RecordEditProps<T>) => {\n  return (\n    <div className=\"edit\">\n      <button className=\"bt-remove\" onClick={() => remove(activeRecord)}>\n        Remove\n      </button>\n      <h2>Edit</h2>\n      <RecordForm\n        FormFields={FormFields}\n        activeRecord={activeRecord}\n        submitAction={update}\n        success={success}\n      />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { Record } from '../../interfaces/RecordEntities';\nimport { RecordMutationsProps } from '../../interfaces/PagesProps';\nimport { RecordNew } from './New';\nimport { RecordEdit } from './Edit';\nimport { useMutation } from '../../hooks/useMutation';\nimport { Status } from '../../components/Status';\nimport { RecordError } from '../../components/RecordError';\n\nexport const RecordMutations = <T extends Record>({\n  FormFields,\n  activeRecord,\n  apiPath,\n  callback,\n}: RecordMutationsProps<T>) => {\n  const {\n    create,\n    update,\n    remove,\n    processing,\n    success,\n    error,\n    setError,\n  } = useMutation<T>(apiPath, callback);\n\n  useEffect(() => {\n    if (activeRecord.id) {\n      setError(undefined);\n    }\n  }, [activeRecord, setError]);\n\n  return (\n    <div className=\"mutations\">\n      {error && <RecordError error={error} />}\n      {activeRecord.id ? (\n        <RecordEdit<T>\n          FormFields={FormFields}\n          activeRecord={activeRecord}\n          update={update}\n          remove={remove}\n          success={success}\n        />\n      ) : (\n        <RecordNew<T>\n          FormFields={FormFields}\n          activeRecord={activeRecord}\n          create={create}\n          success={success}\n        />\n      )}\n      {processing && <Status text=\"Processing...\" />}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport axios, { AxiosError } from 'axios';\nimport { Record } from '../interfaces/RecordEntities';\n\nexport type Action<T> = (record: T) => Promise<void>;\n\nexport const useMutation = <T extends Record>(\n  path: string,\n  callback?: Function\n) => {\n  const [processing, setProcesing] = useState<boolean>(false);\n  const [success, setSuccess] = useState<boolean>();\n  const [error, setError] = useState<AxiosError>();\n\n  const url = `${process.env.REACT_APP_API}/${path}`;\n\n  const wrap = (fn: Action<T>) => {\n    return async (record: T) => {\n      setProcesing(true);\n      setSuccess(undefined);\n      setError(undefined);\n      fn(record)\n        .then(() => {\n          setSuccess(true);\n          if (callback) {\n            callback();\n          }\n        })\n        .catch((error: Error) => {\n          setSuccess(false);\n          setError(error as AxiosError);\n        })\n        .finally(() => {\n          setProcesing(false);\n        });\n    };\n  };\n\n  const create: Action<T> = wrap(async (record: T) => {\n    await axios.post(url, record);\n  });\n\n  const update: Action<T> = wrap(async (record: T) => {\n    await axios.put(`${url}/${record.id}`, record);\n  });\n\n  const remove: Action<T> = wrap(async (record: T) => {\n    await axios.delete(`${url}/${record.id}`);\n  });\n\n  return {\n    create,\n    update,\n    remove,\n    processing,\n    success,\n    error,\n    setError,\n  };\n};\n","import { useState } from 'react';\nimport { Record } from '../../interfaces/RecordEntities';\nimport { RecordIndexProps } from '../../interfaces/PagesProps';\nimport { useFetch } from '../../hooks/useFetch';\nimport { RecordList } from './List';\nimport { RecordMutations } from './Mutations';\n\nexport const RecordIndex = <T extends Record>({\n  apiPath,\n  apiOptions,\n  ListItem,\n  FormFields,\n  emptyRecord,\n}: RecordIndexProps<T>) => {\n  const [activeRecord, setActiveRecord] = useState<T>(emptyRecord);\n  const { records, setVersion, loading, error } = useFetch<T>(\n    apiPath,\n    apiOptions\n  );\n\n  const callback = () => {\n    setVersion(+new Date());\n    setActiveRecord(emptyRecord);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"content\">\n        <RecordList<T>\n          ListItem={ListItem}\n          records={records}\n          emptyRecord={emptyRecord}\n          activeRecord={activeRecord}\n          setActiveRecord={setActiveRecord}\n          loading={loading}\n          error={error}\n        />\n        <RecordMutations<T>\n          FormFields={FormFields}\n          activeRecord={activeRecord}\n          apiPath={apiPath}\n          callback={callback}\n        />\n      </div>\n    </div>\n  );\n};\n","import { Article } from '../../interfaces/RecordEntities';\nimport { ListItemProps } from '../../interfaces/PagesProps';\n\ntype IProps = ListItemProps<Article>;\n\nexport const ArticleListItem: React.FC<IProps> = ({ record }) => {\n  return (\n    <div>\n      <div className=\"title\">{record.title}</div>\n      <div className=\"author\">By {record.author?.name || 'Unknown'}</div>\n    </div>\n  );\n};\n","import { useFetch } from '../../hooks/useFetch';\nimport { FormFieldsProps } from '../../interfaces/PagesProps';\nimport { Article, Author } from '../../interfaces/RecordEntities';\n\ntype IProps = FormFieldsProps<Article>;\n\nexport const ArticleFormFields: React.FC<IProps> = ({\n  formState,\n  handleChange,\n}) => {\n  const authorsFetch = useFetch<Author>('authors');\n\n  return (\n    <div>\n      <div>\n        <label>Title</label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={formState.title}\n          onChange={handleChange}\n        />\n      </div>\n      <div>\n        <label>Text</label>\n        <textarea\n          name=\"text\"\n          value={formState.text}\n          onChange={handleChange}\n          rows={5}\n        />\n      </div>\n      <div>\n        <label>Author</label>\n        <select\n          name=\"author\"\n          value={formState.author ? formState.author.id : ''}\n          onChange={handleChange}\n        >\n          <option value=\"\">Select</option>\n          {authorsFetch.records.map((author) => (\n            <option key={author.id} value={author.id}>\n              {author.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n","import { Article } from '../../interfaces/RecordEntities';\nimport { RecordIndex } from '../Record';\nimport { ArticleListItem } from './ListItem';\nimport { ArticleFormFields } from './FormFields';\n\nexport const ArticleIndex: React.FC = () => {\n  const apiOptions = { relations: ['author'] };\n\n  const emptyRecord = {\n    title: '',\n    text: '',\n  };\n\n  return (\n    <RecordIndex<Article>\n      ListItem={ArticleListItem}\n      apiPath=\"articles\"\n      apiOptions={apiOptions}\n      FormFields={ArticleFormFields}\n      emptyRecord={emptyRecord}\n    />\n  );\n};\n","import { Author } from '../../interfaces/RecordEntities';\nimport { ListItemProps } from '../../interfaces/PagesProps';\n\ntype IProps = ListItemProps<Author>;\n\nexport const AuthorListItem: React.FC<IProps> = ({ record }) => {\n  return <div className=\"title\">{record.name}</div>;\n};\n","import { Author } from '../../interfaces/RecordEntities';\nimport { FormFieldsProps } from '../../interfaces/PagesProps';\n\ntype IProps = FormFieldsProps<Author>;\n\nexport const AuthorFormFields: React.FC<IProps> = ({\n  formState,\n  handleChange,\n}) => {\n  return (\n    <div>\n      <div>\n        <label>Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={formState.name}\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n","import { Author } from '../../interfaces/RecordEntities';\nimport { RecordIndex } from '../Record';\nimport { AuthorListItem } from './ListItem';\nimport { AuthorFormFields } from './FormFields';\n\nexport const AuthorIndex: React.FC = () => {\n  const apiOptions = {};\n\n  const emptyRecord = {\n    name: '',\n  };\n\n  return (\n    <RecordIndex<Author>\n      ListItem={AuthorListItem}\n      apiPath=\"authors\"\n      apiOptions={apiOptions}\n      FormFields={AuthorFormFields}\n      emptyRecord={emptyRecord}\n    />\n  );\n};\n","import { Header } from './components/Header';\nimport { Page, usePage } from './contexts/Page';\nimport { ArticleIndex } from './pages/Article';\nimport { AuthorIndex } from './pages/Author';\n\nconst App: React.FC = () => {\n  const { page } = usePage();\n\n  const renderSwitch = () => {\n    switch (page) {\n      case Page.Articles:\n        return <ArticleIndex />;\n      case Page.Authors:\n        return <AuthorIndex />;\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {renderSwitch()}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { PageStore } from './contexts/Page';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PageStore>\n      <App />\n    </PageStore>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}